{"ast":null,"code":"import raw from './assets/LifeSimulation01.xml';\nclass map {\n  constructor() {\n    this.map_height = 0.0;\n    this.map_width = 0.0;\n    this.initial_plants = 0;\n    this.initial_predators = 0;\n    this.initial_grazers = 0;\n  }\n  get width() {\n    return this.map_width;\n  }\n  set width(num) {\n    this.map_width = num;\n  }\n  get height() {\n    return this.map_height;\n  }\n  set height(num) {\n    this.map_height = num;\n  }\n  get num_plants() {\n    return this.initial_plants;\n  }\n  set num_plants(num) {\n    this.initial_plants = num;\n  }\n  get num_grazers() {\n    return this.initial_grazers;\n  }\n  set num_grazers(num) {\n    this.initial_grazers = num;\n  }\n  get num_predators() {\n    return this.initial_predators;\n  }\n  set num_predators(num) {\n    this.initial_predators = num;\n  }\n}\nclass obstacle {\n  constructor() {\n    this.x = 0;\n    this.y = 0;\n    this.diameter = 0.0;\n  }\n  set x_coord(num) {\n    this.x = num;\n  }\n  get x_coord() {\n    return this.x;\n  }\n  get y_coord() {\n    return this.y;\n  }\n  set y_coord(num) {\n    this.y = num;\n  }\n  get diam() {\n    return this.diameter;\n  }\n  set diam(num) {\n    this.diameter = num;\n  }\n}\nclass plant {\n  constructor() {\n    this.x = 0;\n    this.y = 0;\n    this.diameter = 0.0;\n  }\n  set x_coord(num) {\n    this.x = num;\n  }\n  get x_coord() {\n    return this.x;\n  }\n  get y_coord() {\n    return this.y;\n  }\n  set y_coord(num) {\n    this.y = num;\n  }\n  get diam() {\n    return this.diameter;\n  }\n  set diam(num) {\n    this.diameter = num;\n  }\n}\nclass grazer {\n  constructor() {\n    this.x = 0;\n    this.y = 0;\n  }\n  set x_coord(num) {\n    this.x = num;\n  }\n  get x_coord() {\n    return this.x;\n  }\n  get y_coord() {\n    return this.y;\n  }\n  set y_coord(num) {\n    this.y = num;\n  }\n}\nclass predator {\n  constructor() {\n    this.x = 0;\n    this.y = 0;\n  }\n  set x_coord(num) {\n    this.x = num;\n  }\n  get x_coord() {\n    return this.x;\n  }\n  get y_coord() {\n    return this.y;\n  }\n  set y_coord(num) {\n    this.y = num;\n  }\n}\nconst map1 = new map();\nlet plants = [];\nlet predators = [];\nlet grazers = [];\nlet obstacles = [];\nfetch(raw).then(r => r.text()).then(text => {\n  let lines = text.split('\\n');\n  map1.width = parseFloat(lines[3]);\n  map1.height = parseFloat(lines[6]);\n  map1.num_plants = parseInt(lines[11]);\n  for (let i = 0; i < map1.num_plants; i += 1) {\n    const temp = new plant();\n    temp.x_coord = parseInt(lines[30 + 11 * i]);\n    temp.y_coord = parseInt(lines[33 + 11 * i]);\n    temp.diam = parseFloat(lines[36 + 11 * i]);\n    plants.push(temp);\n  }\n  let grazers_start = 29 + 11 * map1.num_plants;\n  let grazers_end = grazers_start + 18;\n  map1.num_grazers = parseInt(lines[grazers_start + 2]);\n  for (let i = 0; i < map1.num_grazers; i += 1) {\n    const temp = new grazer();\n    temp.x_coord = parseInt(lines[grazers_end + 3 + 11 * i]);\n    temp.y_coord = parseInt(lines[grazers_end + 6 + 11 * i]);\n    grazers.push(temp);\n  }\n  let predators_start = grazers_end + 2 + 11 * map1.num_grazers;\n  let predators_end = predators_start + 30;\n  map1.num_predators = parseInt(lines[predators_start + 2]);\n  for (let i = 0; i < map1.num_predators; i += 1) {\n    const temp = new predator();\n    temp.x_coord = parseInt(lines[predators_end + 3 + 14 * i]);\n    temp.y_coord = parseInt(lines[predators_end + 6 + 14 * i]);\n    predators.push(temp);\n  }\n  let obstacles_start = predators_end + 14 + 14 * map1.num_predators;\n  // let obstacles_end = obstacles_start + 3;\n  map1.num_obstacles = parseInt(lines[obstacles_start + 2]);\n  // for (let i = 0; i < (map1.num_obstacles); i += 1){\n  //       const temp = new obstacle();\n  //       temp.x_coord = parseInt(lines[obstacles_end+3+14*i]);\n  //       temp.y_coord = parseInt(lines[obstacles_end+6+14*i]);\n  //       obstacles.push(temp);\n  // }\n});\nexport { map1, plants, predators, grazers, obstacles }; //,","map":{"version":3,"names":["raw","map","constructor","map_height","map_width","initial_plants","initial_predators","initial_grazers","width","num","height","num_plants","num_grazers","num_predators","obstacle","x","y","diameter","x_coord","y_coord","diam","plant","grazer","predator","map1","plants","predators","grazers","obstacles","fetch","then","r","text","lines","split","parseFloat","parseInt","i","temp","push","grazers_start","grazers_end","predators_start","predators_end","obstacles_start","num_obstacles"],"sources":["C:/Users/jed00/Documents/PROTO_REACT_EXPRESS/frontend/src/InitialFile.js"],"sourcesContent":["import raw from './assets/LifeSimulation01.xml';\r\n\r\nclass map\r\n{\r\n      constructor()\r\n      {\r\n            this.map_height = 0.0;\r\n            this.map_width = 0.0;   \r\n            this.initial_plants = 0;   \r\n            this.initial_predators = 0;\r\n            this.initial_grazers = 0;\r\n      }\r\n      get width() { return this.map_width; }\r\n      set width(num) { this.map_width = num; }\r\n      get height() { return this.map_height; }\r\n      set height(num) { this.map_height = num; } \r\n      get num_plants() { return this.initial_plants }\r\n      set num_plants(num) { this.initial_plants = num }\r\n      get num_grazers() { return this.initial_grazers }\r\n      set num_grazers(num) { this.initial_grazers = num }\r\n      get num_predators() { return this.initial_predators }\r\n      set num_predators(num) { this.initial_predators = num }\r\n}\r\n\r\nclass obstacle\r\n{\r\n      constructor()\r\n      {\r\n            this.x = 0;\r\n            this.y = 0;\r\n            this.diameter = 0.0;\r\n      }\r\n      set x_coord(num) { this.x = num; }\r\n      get x_coord() { return this.x; }\r\n      get y_coord() { return this.y; }\r\n      set y_coord(num) { this.y = num; }\r\n      get diam() { return this.diameter; }\r\n      set diam(num) { this.diameter = num; }\r\n}\r\n\r\nclass plant\r\n{\r\n      constructor()\r\n      {\r\n            this.x = 0;\r\n            this.y = 0;\r\n            this.diameter = 0.0;\r\n      }\r\n      set x_coord(num) { this.x = num; }\r\n      get x_coord() { return this.x; }\r\n      get y_coord() { return this.y; }\r\n      set y_coord(num) { this.y = num; }\r\n      get diam() { return this.diameter; }\r\n      set diam(num) { this.diameter = num; }\r\n}\r\n\r\nclass grazer\r\n{\r\n      constructor()\r\n      {\r\n            this.x = 0;\r\n            this.y = 0;\r\n      }\r\n      set x_coord(num) { this.x = num; }\r\n      get x_coord() { return this.x; }\r\n      get y_coord() { return this.y; }\r\n      set y_coord(num) { this.y = num; }\r\n}\r\n\r\nclass predator\r\n{\r\n      constructor()\r\n      {\r\n            this.x = 0;\r\n            this.y = 0;\r\n      }\r\n      set x_coord(num) { this.x = num; }\r\n      get x_coord() { return this.x; }\r\n      get y_coord() { return this.y; }\r\n      set y_coord(num) { this.y = num; }\r\n}\r\n\r\nconst map1 = new map();\r\n\r\nlet plants = [];\r\nlet predators = [];\r\nlet grazers = [];\r\nlet obstacles = [];\r\n\r\nfetch(raw)\r\n            .then(r=>r.text())\r\n            .then(text=>{\r\n\r\n                  let lines =  text.split('\\n');\r\n                  map1.width = parseFloat(lines[3]);\r\n                  map1.height = parseFloat(lines[6]);\r\n                  map1.num_plants = parseInt(lines[11]);\r\n                  \r\n                  for (let i = 0; i < (map1.num_plants); i += 1){\r\n                        const temp = new plant();\r\n                        temp.x_coord = parseInt(lines[30+11*i]);\r\n                        temp.y_coord = parseInt(lines[33+11*i]);\r\n                        temp.diam = parseFloat(lines[36+11*i]);\r\n                        plants.push(temp);\r\n                  }\r\n                  let grazers_start = 29 + 11 * map1.num_plants;\r\n                  let grazers_end = grazers_start + 18;\r\n                  map1.num_grazers = parseInt(lines[grazers_start + 2]);\r\n                  for (let i = 0; i < (map1.num_grazers); i += 1){\r\n                        const temp = new grazer();\r\n                        temp.x_coord = parseInt(lines[grazers_end+3+11*i]);\r\n                        temp.y_coord = parseInt(lines[grazers_end+6+11*i]);\r\n                        grazers.push(temp);\r\n                  }\r\n                  let predators_start = grazers_end + 2 + 11 * map1.num_grazers;\r\n                  let predators_end = predators_start + 30;\r\n                  map1.num_predators = parseInt(lines[predators_start + 2]);\r\n                  for (let i = 0; i < (map1.num_predators); i += 1){\r\n                        const temp = new predator();\r\n                        temp.x_coord = parseInt(lines[predators_end+3+14*i]);\r\n                        temp.y_coord = parseInt(lines[predators_end+6+14*i]);\r\n                        predators.push(temp);\r\n                  }\r\n                  let obstacles_start = predators_end + 14+ 14 * map1.num_predators;\r\n                  // let obstacles_end = obstacles_start + 3;\r\n                   map1.num_obstacles = parseInt(lines[obstacles_start + 2]);\r\n                  // for (let i = 0; i < (map1.num_obstacles); i += 1){\r\n                  //       const temp = new obstacle();\r\n                  //       temp.x_coord = parseInt(lines[obstacles_end+3+14*i]);\r\n                  //       temp.y_coord = parseInt(lines[obstacles_end+6+14*i]);\r\n                  //       obstacles.push(temp);\r\n                  // }\r\n            })\r\n\r\nexport {map1, plants, predators, grazers, obstacles };//, \r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}