{"ast":null,"code":"import raw from './assets/LifeSimulation01.xml';\nclass map {\n  constructor() {\n    this.plant = {\n      x: 0,\n      y: 0\n    };\n    this.map_height = 0;\n    this.map_width = 0;\n    this.num_plants = 0;\n  }\n  get width() {\n    return this.map_width;\n  }\n  set width(num) {\n    this.map_width = num;\n  }\n  get height() {\n    return this.map_height;\n  }\n  set height(num) {\n    this.map_height = num;\n  }\n  get num_plants() {\n    return this.num_plants;\n  }\n  set num_plants(num) {\n    this.num_plants = num;\n  }\n}\nclass plant {\n  constructor() {\n    this.x = 0;\n    this.y = 0;\n    this.diameter = 0.0;\n  }\n  get diameter() {\n    return this.diameter;\n  }\n  set diameter(num) {\n    this.diameter = num;\n  }\n\n  //get plants() { return this.plants }\n  // append_plants(x_coord, y_coord) {\n  //       let temp = this.plant;\n  //       temp.x = x_coord;\n  //       temp.y = y_coord;\n  //       this.plants.push(temp)}\n  // get_a_plant() {\n  //       let temp = this.plant; \n  //       temp = this.plants[0];\n  //       if (temp == null)\n  //             return(0,0);\n  //       else \n  //             return [temp.x, temp.y]; \n  // };\n}\nconst map1 = new map();\nconst plant1 = new plant();\nlet plants = [];\nfetch(raw).then(r => r.text()).then(text => {\n  let lines = text.split('\\n');\n  map1.width = parseInt(lines[3]);\n  map1.height = parseInt(lines[6]);\n  map1.num_plants = parseInt(lines[11]);\n  for (let i = 30; i < 30 + map1.num_plants * 11; i += 11) {\n    plant1.x = parseInt(lines[i]);\n    plant1.y = parseInt(lines[i + 3]);\n    plant1.diameter = parseFloat(i + 3);\n    plants.push(plant1);\n  }\n});\nexport { map1, plants, plant };","map":{"version":3,"names":["raw","map","constructor","plant","x","y","map_height","map_width","num_plants","width","num","height","diameter","map1","plant1","plants","fetch","then","r","text","lines","split","parseInt","i","parseFloat","push"],"sources":["C:/Users/jed00/Documents/PROTO_REACT_EXPRESS/frontend/src/InitialFile.js"],"sourcesContent":["import raw from './assets/LifeSimulation01.xml';\r\n\r\nclass map\r\n{\r\n      constructor()\r\n      {\r\n            this.map_height = 0;\r\n            this.map_width = 0;   \r\n            this.num_plants = 0;   \r\n      }\r\n      plant = {\r\n          x: 0,\r\n          y: 0,\r\n      }\r\n      get width() { return this.map_width }\r\n      set width(num) { this.map_width = num }\r\n      get height() { return this.map_height }\r\n      set height(num) { this.map_height = num } \r\n      get num_plants() { return this.num_plants }\r\n      set num_plants(num) { this.num_plants = num }\r\n}\r\n\r\nclass plant\r\n{\r\n      constructor()\r\n      {\r\n            this.x = 0;\r\n            this.y = 0;\r\n            this.diameter = 0.0;\r\n              \r\n      }\r\n      \r\n      \r\n      get diameter() { return this.diameter }\r\n      set diameter(num) { this.diameter = num }\r\n\r\n      //get plants() { return this.plants }\r\n      // append_plants(x_coord, y_coord) {\r\n      //       let temp = this.plant;\r\n      //       temp.x = x_coord;\r\n      //       temp.y = y_coord;\r\n      //       this.plants.push(temp)}\r\n      // get_a_plant() {\r\n      //       let temp = this.plant; \r\n      //       temp = this.plants[0];\r\n      //       if (temp == null)\r\n      //             return(0,0);\r\n      //       else \r\n      //             return [temp.x, temp.y]; \r\n      // };\r\n}\r\n\r\nconst map1 = new map();\r\nconst plant1 = new plant();\r\n\r\nlet plants = [];\r\n\r\n\r\nfetch(raw)\r\n            .then(r=>r.text())\r\n            .then(text=>{\r\n                  let lines =  text.split('\\n');\r\n                  map1.width = parseInt(lines[3]);\r\n                  map1.height = parseInt(lines[6]);\r\n                  map1.num_plants = parseInt(lines[11]);\r\n                  \r\n                  for (let i = 30; i < (30 + map1.num_plants*11); i += 11){\r\n                        plant1.x = parseInt(lines[i]);\r\n                        plant1.y = parseInt(lines[i+3]);\r\n                        plant1.diameter = parseFloat(i+3);\r\n                        plants.push(plant1);\r\n                  }\r\n            })\r\n\r\nexport {map1, plants, plant};\r\n"],"mappings":"AAAA,OAAOA,GAAG,MAAM,+BAA+B;AAE/C,MAAMC,GAAG,CACT;EACMC,WAAWA,CAAA,EACX;IAAA,KAKAC,KAAK,GAAG;MACJC,CAAC,EAAE,CAAC;MACJC,CAAC,EAAE;IACP,CAAC;IAPK,IAAI,CAACC,UAAU,GAAG,CAAC;IACnB,IAAI,CAACC,SAAS,GAAG,CAAC;IAClB,IAAI,CAACC,UAAU,GAAG,CAAC;EACzB;EAKA,IAAIC,KAAKA,CAAA,EAAG;IAAE,OAAO,IAAI,CAACF,SAAS;EAAC;EACpC,IAAIE,KAAKA,CAACC,GAAG,EAAE;IAAE,IAAI,CAACH,SAAS,GAAGG,GAAG;EAAC;EACtC,IAAIC,MAAMA,CAAA,EAAG;IAAE,OAAO,IAAI,CAACL,UAAU;EAAC;EACtC,IAAIK,MAAMA,CAACD,GAAG,EAAE;IAAE,IAAI,CAACJ,UAAU,GAAGI,GAAG;EAAC;EACxC,IAAIF,UAAUA,CAAA,EAAG;IAAE,OAAO,IAAI,CAACA,UAAU;EAAC;EAC1C,IAAIA,UAAUA,CAACE,GAAG,EAAE;IAAE,IAAI,CAACF,UAAU,GAAGE,GAAG;EAAC;AAClD;AAEA,MAAMP,KAAK,CACX;EACMD,WAAWA,CAAA,EACX;IACM,IAAI,CAACE,CAAC,GAAG,CAAC;IACV,IAAI,CAACC,CAAC,GAAG,CAAC;IACV,IAAI,CAACO,QAAQ,GAAG,GAAG;EAEzB;EAGA,IAAIA,QAAQA,CAAA,EAAG;IAAE,OAAO,IAAI,CAACA,QAAQ;EAAC;EACtC,IAAIA,QAAQA,CAACF,GAAG,EAAE;IAAE,IAAI,CAACE,QAAQ,GAAGF,GAAG;EAAC;;EAExC;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;AACN;AAEA,MAAMG,IAAI,GAAG,IAAIZ,GAAG,CAAC,CAAC;AACtB,MAAMa,MAAM,GAAG,IAAIX,KAAK,CAAC,CAAC;AAE1B,IAAIY,MAAM,GAAG,EAAE;AAGfC,KAAK,CAAChB,GAAG,CAAC,CACGiB,IAAI,CAACC,CAAC,IAAEA,CAAC,CAACC,IAAI,CAAC,CAAC,CAAC,CACjBF,IAAI,CAACE,IAAI,IAAE;EACN,IAAIC,KAAK,GAAID,IAAI,CAACE,KAAK,CAAC,IAAI,CAAC;EAC7BR,IAAI,CAACJ,KAAK,GAAGa,QAAQ,CAACF,KAAK,CAAC,CAAC,CAAC,CAAC;EAC/BP,IAAI,CAACF,MAAM,GAAGW,QAAQ,CAACF,KAAK,CAAC,CAAC,CAAC,CAAC;EAChCP,IAAI,CAACL,UAAU,GAAGc,QAAQ,CAACF,KAAK,CAAC,EAAE,CAAC,CAAC;EAErC,KAAK,IAAIG,CAAC,GAAG,EAAE,EAAEA,CAAC,GAAI,EAAE,GAAGV,IAAI,CAACL,UAAU,GAAC,EAAG,EAAEe,CAAC,IAAI,EAAE,EAAC;IAClDT,MAAM,CAACV,CAAC,GAAGkB,QAAQ,CAACF,KAAK,CAACG,CAAC,CAAC,CAAC;IAC7BT,MAAM,CAACT,CAAC,GAAGiB,QAAQ,CAACF,KAAK,CAACG,CAAC,GAAC,CAAC,CAAC,CAAC;IAC/BT,MAAM,CAACF,QAAQ,GAAGY,UAAU,CAACD,CAAC,GAAC,CAAC,CAAC;IACjCR,MAAM,CAACU,IAAI,CAACX,MAAM,CAAC;EACzB;AACN,CAAC,CAAC;AAEd,SAAQD,IAAI,EAAEE,MAAM,EAAEZ,KAAK"},"metadata":{},"sourceType":"module","externalDependencies":[]}