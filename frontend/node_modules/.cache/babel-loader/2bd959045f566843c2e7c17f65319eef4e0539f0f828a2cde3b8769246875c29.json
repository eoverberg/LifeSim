{"ast":null,"code":"import raw from './assets/LifeSimulation01.xml';\nclass map {\n  constructor() {\n    this.map_height = 0.0;\n    this.map_width = 0.0;\n    //      this.num_plants = 0;   \n  }\n  get width() {\n    return this.map_width;\n  }\n  set width(num) {\n    this.map_width = num;\n  }\n  get height() {\n    return this.map_height;\n  }\n  set height(num) {\n    this.map_height = num;\n  }\n  // get num_plants() { return this.num_plants }\n  // set num_plants(num) { this.num_plants = num }\n}\n\n// class plant\n// {\n//       constructor()\n//       {\n//             this.x = 0;\n//             this.y = 0;\n//             this.diameter = 0.0;\n//       }\n\n//       get x() { return this.x }\n//       set x(num) { this.x = num }\n//       get y() { return this.y }\n//       set y(num) { this.y = num }\n//       get diameter() { return this.diameter }\n//       set diameter(num) { this.diameter = num }\n\n//       //get plants() { return this.plants }\n//       // append_plants(x_coord, y_coord) {\n//       //       let temp = this.plant;\n//       //       temp.x = x_coord;\n//       //       temp.y = y_coord;\n//       //       this.plants.push(temp)}\n//       // get_a_plant() {\n//       //       let temp = this.plant; \n//       //       temp = this.plants[0];\n//       //       if (temp == null)\n//       //             return(0,0);\n//       //       else \n//       //             return [temp.x, temp.y]; \n//       // };\n// }\n\nconst map1 = new map();\n//const plant1 = new plant();\n\n//let plants = [];\n\nfetch(raw).then(r => r.text()).then(text => {\n  let lines = text.split('\\n');\n  map1.width = parseFloat(lines[3]);\n  map1.height = parseFloat(lines[6]);\n  //map1.num_plants = parseInt(lines[11]);\n\n  //for (let i = 0; i < (); i += 11){\n  //      plant1.x = parseInt(lines[0+30]);\n  //      plant1.y = parseInt(lines[0+33]);\n  //     plant1.diameter = parseFloat(lines[0+36]);\n  //plants.push(plant1);\n  //}\n});\nexport { map1 }; //plants,,  plant1","map":{"version":3,"names":["raw","map","constructor","map_height","map_width","width","num","height","map1","fetch","then","r","text","lines","split","parseFloat"],"sources":["C:/Users/jed00/Documents/PROTO_REACT_EXPRESS/frontend/src/InitialFile.js"],"sourcesContent":["import raw from './assets/LifeSimulation01.xml';\r\n\r\nclass map\r\n{\r\n      constructor()\r\n      {\r\n            this.map_height = 0.0;\r\n            this.map_width = 0.0;   \r\n      //      this.num_plants = 0;   \r\n      }\r\n      get width() { return this.map_width }\r\n      set width(num) { this.map_width = num }\r\n      get height() { return this.map_height }\r\n      set height(num) { this.map_height = num } \r\n     // get num_plants() { return this.num_plants }\r\n     // set num_plants(num) { this.num_plants = num }\r\n}\r\n\r\n// class plant\r\n// {\r\n//       constructor()\r\n//       {\r\n//             this.x = 0;\r\n//             this.y = 0;\r\n//             this.diameter = 0.0;\r\n//       }\r\n\r\n//       get x() { return this.x }\r\n//       set x(num) { this.x = num }\r\n//       get y() { return this.y }\r\n//       set y(num) { this.y = num }\r\n//       get diameter() { return this.diameter }\r\n//       set diameter(num) { this.diameter = num }\r\n\r\n//       //get plants() { return this.plants }\r\n//       // append_plants(x_coord, y_coord) {\r\n//       //       let temp = this.plant;\r\n//       //       temp.x = x_coord;\r\n//       //       temp.y = y_coord;\r\n//       //       this.plants.push(temp)}\r\n//       // get_a_plant() {\r\n//       //       let temp = this.plant; \r\n//       //       temp = this.plants[0];\r\n//       //       if (temp == null)\r\n//       //             return(0,0);\r\n//       //       else \r\n//       //             return [temp.x, temp.y]; \r\n//       // };\r\n// }\r\n\r\nconst map1 = new map();\r\n//const plant1 = new plant();\r\n\r\n//let plants = [];\r\n\r\n\r\nfetch(raw)\r\n            .then(r=>r.text())\r\n            .then(text=>{\r\n\r\n                  let lines =  text.split('\\n');\r\n                  map1.width = parseFloat(lines[3]);\r\n                  map1.height = parseFloat(lines[6]);\r\n                  //map1.num_plants = parseInt(lines[11]);\r\n                  \r\n                  //for (let i = 0; i < (); i += 11){\r\n                  //      plant1.x = parseInt(lines[0+30]);\r\n                  //      plant1.y = parseInt(lines[0+33]);\r\n                  //     plant1.diameter = parseFloat(lines[0+36]);\r\n                        //plants.push(plant1);\r\n                  //}\r\n            })\r\n\r\nexport {map1};//plants,,  plant1\r\n"],"mappings":"AAAA,OAAOA,GAAG,MAAM,+BAA+B;AAE/C,MAAMC,GAAG,CACT;EACMC,WAAWA,CAAA,EACX;IACM,IAAI,CAACC,UAAU,GAAG,GAAG;IACrB,IAAI,CAACC,SAAS,GAAG,GAAG;IAC1B;EACA;EACA,IAAIC,KAAKA,CAAA,EAAG;IAAE,OAAO,IAAI,CAACD,SAAS;EAAC;EACpC,IAAIC,KAAKA,CAACC,GAAG,EAAE;IAAE,IAAI,CAACF,SAAS,GAAGE,GAAG;EAAC;EACtC,IAAIC,MAAMA,CAAA,EAAG;IAAE,OAAO,IAAI,CAACJ,UAAU;EAAC;EACtC,IAAII,MAAMA,CAACD,GAAG,EAAE;IAAE,IAAI,CAACH,UAAU,GAAGG,GAAG;EAAC;EACzC;EACA;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAME,IAAI,GAAG,IAAIP,GAAG,CAAC,CAAC;AACtB;;AAEA;;AAGAQ,KAAK,CAACT,GAAG,CAAC,CACGU,IAAI,CAACC,CAAC,IAAEA,CAAC,CAACC,IAAI,CAAC,CAAC,CAAC,CACjBF,IAAI,CAACE,IAAI,IAAE;EAEN,IAAIC,KAAK,GAAID,IAAI,CAACE,KAAK,CAAC,IAAI,CAAC;EAC7BN,IAAI,CAACH,KAAK,GAAGU,UAAU,CAACF,KAAK,CAAC,CAAC,CAAC,CAAC;EACjCL,IAAI,CAACD,MAAM,GAAGQ,UAAU,CAACF,KAAK,CAAC,CAAC,CAAC,CAAC;EAClC;;EAEA;EACA;EACA;EACA;EACM;EACN;AACN,CAAC,CAAC;AAEd,SAAQL,IAAI,GAAE"},"metadata":{},"sourceType":"module","externalDependencies":[]}