{"ast":null,"code":"import raw from './assets/LifeSimulation01.xml';\nclass map {\n  constructor() {\n    this.map_height = 0.0;\n    this.map_width = 0.0;\n    this.num_plants = 0;\n  }\n  get width() {\n    return this.map_width;\n  }\n  set width(num) {\n    this.map_width = num;\n  }\n  get height() {\n    return this.map_height;\n  }\n  set height(num) {\n    this.map_height = num;\n  }\n  //get num_plants() { return this.num_plants }\n  //set num_plants(num) { this.num_plants = num }\n}\nclass plant {\n  constructor() {\n    this.x = 0;\n    this.y = 0;\n    this.diameter = 0.0;\n  }\n  get x() {\n    return this.x;\n  }\n  set x(num) {\n    this.x = num;\n  }\n  get y() {\n    return this.y;\n  }\n  set y(num) {\n    this.y = num;\n  }\n  get diameter() {\n    return this.diameter;\n  }\n  set diameter(num) {\n    this.diameter = num;\n  }\n\n  //get plants() { return this.plants }\n  // append_plants(x_coord, y_coord) {\n  //       let temp = this.plant;\n  //       temp.x = x_coord;\n  //       temp.y = y_coord;\n  //       this.plants.push(temp)}\n  // get_a_plant() {\n  //       let temp = this.plant; \n  //       temp = this.plants[0];\n  //       if (temp == null)\n  //             return(0,0);\n  //       else \n  //             return [temp.x, temp.y]; \n  // };\n}\nconst map1 = new map();\nconst plant1 = new plant();\n\n//let plants = [];\n\nfetch(raw).then(r => r.text()).then(text => {\n  let lines = text.split('\\n');\n  map1.width = parseFloat(lines[3]);\n  map1.height = parseFloat(lines[6]);\n  //map1.num_plants = parseInt(lines[11]);\n\n  //for (let i = 0; i < (); i += 11){\n  plant1.x = parseInt(lines[30]);\n  plant1.y = parseInt(lines[33]);\n  plant1.diameter = parseFloat(lines[36]);\n  //plants.push(plant1);\n  //}\n});\nexport { map1 }; //plants,, , plant1","map":{"version":3,"names":["raw","map","constructor","map_height","map_width","num_plants","width","num","height","plant","x","y","diameter","map1","plant1","fetch","then","r","text","lines","split","parseFloat","parseInt"],"sources":["C:/Users/jed00/Documents/PROTO_REACT_EXPRESS/frontend/src/InitialFile.js"],"sourcesContent":["import raw from './assets/LifeSimulation01.xml';\r\n\r\nclass map\r\n{\r\n      constructor()\r\n      {\r\n            this.map_height = 0.0;\r\n            this.map_width = 0.0;   \r\n            this.num_plants = 0;   \r\n      }\r\n      get width() { return this.map_width }\r\n      set width(num) { this.map_width = num }\r\n      get height() { return this.map_height }\r\n      set height(num) { this.map_height = num } \r\n      //get num_plants() { return this.num_plants }\r\n      //set num_plants(num) { this.num_plants = num }\r\n}\r\n\r\nclass plant\r\n{\r\n      constructor()\r\n      {\r\n            this.x = 0;\r\n            this.y = 0;\r\n            this.diameter = 0.0;\r\n      }\r\n\r\n      get x() { return this.x }\r\n      set x(num) { this.x = num }\r\n      get y() { return this.y }\r\n      set y(num) { this.y = num }\r\n      get diameter() { return this.diameter }\r\n      set diameter(num) { this.diameter = num }\r\n\r\n      //get plants() { return this.plants }\r\n      // append_plants(x_coord, y_coord) {\r\n      //       let temp = this.plant;\r\n      //       temp.x = x_coord;\r\n      //       temp.y = y_coord;\r\n      //       this.plants.push(temp)}\r\n      // get_a_plant() {\r\n      //       let temp = this.plant; \r\n      //       temp = this.plants[0];\r\n      //       if (temp == null)\r\n      //             return(0,0);\r\n      //       else \r\n      //             return [temp.x, temp.y]; \r\n      // };\r\n}\r\n\r\nconst map1 = new map();\r\nconst plant1 = new plant();\r\n\r\n//let plants = [];\r\n\r\n\r\nfetch(raw)\r\n            .then(r=>r.text())\r\n            .then(text=>{\r\n\r\n                  let lines =  text.split('\\n');\r\n                  map1.width = parseFloat(lines[3]);\r\n                  map1.height = parseFloat(lines[6]);\r\n                  //map1.num_plants = parseInt(lines[11]);\r\n                  \r\n                  //for (let i = 0; i < (); i += 11){\r\n                        plant1.x = parseInt(lines[30]);\r\n                        plant1.y = parseInt(lines[33]);\r\n                       plant1.diameter = parseFloat(lines[36]);\r\n                        //plants.push(plant1);\r\n                  //}\r\n            })\r\n\r\nexport {map1};//plants,, , plant1 \r\n"],"mappings":"AAAA,OAAOA,GAAG,MAAM,+BAA+B;AAE/C,MAAMC,GAAG,CACT;EACMC,WAAWA,CAAA,EACX;IACM,IAAI,CAACC,UAAU,GAAG,GAAG;IACrB,IAAI,CAACC,SAAS,GAAG,GAAG;IACpB,IAAI,CAACC,UAAU,GAAG,CAAC;EACzB;EACA,IAAIC,KAAKA,CAAA,EAAG;IAAE,OAAO,IAAI,CAACF,SAAS;EAAC;EACpC,IAAIE,KAAKA,CAACC,GAAG,EAAE;IAAE,IAAI,CAACH,SAAS,GAAGG,GAAG;EAAC;EACtC,IAAIC,MAAMA,CAAA,EAAG;IAAE,OAAO,IAAI,CAACL,UAAU;EAAC;EACtC,IAAIK,MAAMA,CAACD,GAAG,EAAE;IAAE,IAAI,CAACJ,UAAU,GAAGI,GAAG;EAAC;EACxC;EACA;AACN;AAEA,MAAME,KAAK,CACX;EACMP,WAAWA,CAAA,EACX;IACM,IAAI,CAACQ,CAAC,GAAG,CAAC;IACV,IAAI,CAACC,CAAC,GAAG,CAAC;IACV,IAAI,CAACC,QAAQ,GAAG,GAAG;EACzB;EAEA,IAAIF,CAACA,CAAA,EAAG;IAAE,OAAO,IAAI,CAACA,CAAC;EAAC;EACxB,IAAIA,CAACA,CAACH,GAAG,EAAE;IAAE,IAAI,CAACG,CAAC,GAAGH,GAAG;EAAC;EAC1B,IAAII,CAACA,CAAA,EAAG;IAAE,OAAO,IAAI,CAACA,CAAC;EAAC;EACxB,IAAIA,CAACA,CAACJ,GAAG,EAAE;IAAE,IAAI,CAACI,CAAC,GAAGJ,GAAG;EAAC;EAC1B,IAAIK,QAAQA,CAAA,EAAG;IAAE,OAAO,IAAI,CAACA,QAAQ;EAAC;EACtC,IAAIA,QAAQA,CAACL,GAAG,EAAE;IAAE,IAAI,CAACK,QAAQ,GAAGL,GAAG;EAAC;;EAExC;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;AACN;AAEA,MAAMM,IAAI,GAAG,IAAIZ,GAAG,CAAC,CAAC;AACtB,MAAMa,MAAM,GAAG,IAAIL,KAAK,CAAC,CAAC;;AAE1B;;AAGAM,KAAK,CAACf,GAAG,CAAC,CACGgB,IAAI,CAACC,CAAC,IAAEA,CAAC,CAACC,IAAI,CAAC,CAAC,CAAC,CACjBF,IAAI,CAACE,IAAI,IAAE;EAEN,IAAIC,KAAK,GAAID,IAAI,CAACE,KAAK,CAAC,IAAI,CAAC;EAC7BP,IAAI,CAACP,KAAK,GAAGe,UAAU,CAACF,KAAK,CAAC,CAAC,CAAC,CAAC;EACjCN,IAAI,CAACL,MAAM,GAAGa,UAAU,CAACF,KAAK,CAAC,CAAC,CAAC,CAAC;EAClC;;EAEA;EACML,MAAM,CAACJ,CAAC,GAAGY,QAAQ,CAACH,KAAK,CAAC,EAAE,CAAC,CAAC;EAC9BL,MAAM,CAACH,CAAC,GAAGW,QAAQ,CAACH,KAAK,CAAC,EAAE,CAAC,CAAC;EAC/BL,MAAM,CAACF,QAAQ,GAAGS,UAAU,CAACF,KAAK,CAAC,EAAE,CAAC,CAAC;EACtC;EACN;AACN,CAAC,CAAC;AAEd,SAAQN,IAAI,GAAE"},"metadata":{},"sourceType":"module","externalDependencies":[]}