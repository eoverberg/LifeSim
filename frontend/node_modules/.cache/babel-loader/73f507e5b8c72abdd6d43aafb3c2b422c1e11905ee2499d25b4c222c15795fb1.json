{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\jed00\\\\Documents\\\\PROTO_REACT_EXPRESS\\\\frontend\\\\src\\\\Canvas.js\",\n  _s = $RefreshSig$();\nimport React, { useRef, useEffect } from 'react';\n//import raw from './assets/LifeSimulation02.xml';\n//mport raw from './assets/usefile.xml';\n// class Map \n// {\n//       constructor()\n//       {\n//             this.map_height = 0.0;\n//             this.map_width = 0.0;   \n//             this.initial_plants = 0;   \n//             this.initial_predators = 0;\n//             this.initial_grazers = 0;\n//             this.initial_obstacles = 0;\n//       }\n//       get width() { return this.map_width; }\n//       set width(num) { this.map_width = num; }\n//       get height() { return this.map_height; }\n//       set height(num) { this.map_height = num; } \n//       get num_plants() { return this.initial_plants }\n//       set num_plants(num) { this.initial_plants = num }\n//       get num_grazers() { return this.initial_grazers }\n//       set num_grazers(num) { this.initial_grazers = num }\n//       get num_predators() { return this.initial_predators }\n//       set num_predators(num) { this.initial_predators = num }\n//       get num_obstacles() { return this.initial_obstacles }\n//       set num_obstacles(num) { this.initial_obstacles = num }\n// }\n\n// class Grazer\n// {\n//       constructor()\n//       {\n//             this.x = 0;\n//             this.y = 0;\n//       }\n//       set x_coord(num) { this.x = num; }\n//       get x_coord() { return this.x; }\n//       get y_coord() { return this.y; }\n//       set y_coord(num) { this.y = num; }\n// }\n\n// class Obstacle\n// {\n//       constructor()\n//       {\n//             this.x = 0;\n//             this.y = 0;\n//             this.diameter = 0.0;\n//       }\n//       set x_coord(num) { this.x = num; }\n//       get x_coord() { return this.x; }\n//       get y_coord() { return this.y; }\n//       set y_coord(num) { this.y = num; }\n//       get diam() { return this.diameter; }\n//       set diam(num) { this.diameter = num; }\n// }\n\n// class Plant\n// {\n//       constructor()\n//       {\n//             this.x = 0;\n//             this.y = 0;\n//             this.diameter = 0.0;\n//       }\n//       set x_coord(num) { this.x = num; }\n//       get x_coord() { return this.x; }\n//       get y_coord() { return this.y; }\n//       set y_coord(num) { this.y = num; }\n//       get diam() { return this.diameter; }\n//       set diam(num) { this.diameter = num; }\n// }\n\n// class Predator\n// {\n//       constructor()\n//       {\n//             this.x = 0;\n//             this.y = 0;\n//       }\n//       set x_coord(num) { this.x = num; }\n//       get x_coord() { return this.x; }\n//       get y_coord() { return this.y; }\n//       set y_coord(num) { this.y = num; }\n// }\n\n// const map1 = new Map();\n// let plants = [];\n// let predators = [];\n// let grazers = [];\n// let obstacles = [];\n\n// fetch(raw)\n// .then(r=>r.text())\n// .then(text=>{\n//       let lines =  text.split('\\n');\n//       map1.width = parseFloat(lines[3]);\n//       map1.height = parseFloat(lines[6]);\n//       map1.num_plants = parseInt(lines[11]);\n\n//       for (let i = 0; i < (map1.num_plants); i += 1)\n//       {\n//             const temp = new Plant();\n//             temp.x_coord = parseInt(lines[30+11*i]);\n//             temp.y_coord = parseInt(lines[33+11*i]);\n//             temp.diam = parseFloat(lines[36+11*i]);\n//             plants.push(temp);\n//       }\n\n//       let grazers_start = 29 + 11 * map1.num_plants;\n//       let grazers_end = grazers_start + 18;\n//       map1.num_grazers = parseInt(lines[grazers_start + 2]);\n\n//       for (let i = 0; i < (map1.num_grazers); i += 1)\n//       {\n//             const temp = new Grazer();\n//             temp.x_coord = parseInt(lines[grazers_end+3+11*i]);\n//             temp.y_coord = parseInt(lines[grazers_end+6+11*i]);\n//             grazers.push(temp);\n//       }\n\n//       let predators_start = grazers_end + 2 + 11 * map1.num_grazers;\n//       let predators_end = predators_start + 30;\n//       map1.num_predators = parseInt(lines[predators_start + 2]);\n\n//       for (let i = 0; i < (map1.num_predators); i += 1)\n//       {\n//             const temp = new Predator();\n//             temp.x_coord = parseInt(lines[predators_end+3+14*i]);\n//             temp.y_coord = parseInt(lines[predators_end+6+14*i]);\n//             predators.push(temp);\n//       }\n\n//       let obstacles_start = predators_end + 2 + 14 * map1.num_predators;\n//       let obstacles_end = obstacles_start + 3;\n//       map1.num_obstacles = parseInt(lines[obstacles_start + 2]);\n\n//       for (let i = 0; i < (map1.num_obstacles); i += 1)\n//       {\n//             const temp = new Obstacle();\n//             temp.x_coord = parseInt(lines[obstacles_end+3+14*i]);\n//             temp.y_coord = parseInt(lines[obstacles_end+6+14*i]);\n//             temp.diam = parseFloat(lines[obstacles_end+9+14*i]);\n//             obstacles.push(temp);\n//       }\n// });\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst urlName = window.location.pathname;\nconst raw = require(`${urlName}.xml`);\nfunction drawLine(ctx, x1, y1, x2, y2, bColor) {\n  ctx.beginPath();\n  ctx.moveTo(x1, y1);\n  ctx.lineTo(x2, y2);\n  ctx.lineWidth = .5;\n  ctx.strokeStyle = bColor;\n  ctx.fillStyle = bColor;\n  ctx.fill();\n  ctx.stroke();\n}\n;\n//draws a big line that looks like a square\n\nfunction drawBlock(ctx, x1, y1, bColor) {\n  ctx.beginPath();\n  ctx.moveTo(x1, y1 + 5);\n  ctx.lineTo(x1 + 10, y1 + 5);\n  ctx.lineWidth = 10;\n  ctx.strokeStyle = bColor;\n  ctx.stroke();\n}\n;\nfunction drawCircle(ctx, x1, y1, d1, bColor) {\n  ctx.beginPath();\n  ctx.arc(x1 + 5, y1 + 5, d1 / 2, 0, 2 * Math.PI);\n  ctx.lineWidth = 1;\n  ctx.strokeStyle = bColor;\n  ctx.fillStyle = bColor;\n  ctx.fill();\n  ctx.stroke();\n}\n;\nconst Canvas = props => {\n  _s();\n  const canvasRef = useRef(null);\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    const context = canvas.getContext('2d');\n    // context.canvas.width = map1.width;\n    // context.canvas.height = map1.height;\n\n    fetch(raw).then(r => r.text()).then(text => {\n      let lines = text.split('\\n');\n      context.canvas.width = parseFloat(lines[3]);\n      ;\n      context.canvas.height = parseFloat(lines[6]);\n      context.canvas.style = \"border:1px solid #000000;\";\n      let num_plants = parseInt(lines[11]);\n      let grazers_start = 29 + 11 * num_plants;\n      let grazers_end = grazers_start + 18;\n      let num_grazers = parseInt(lines[grazers_start + 2]);\n      let predators_start = grazers_end + 2 + 11 * num_grazers;\n      let predators_end = predators_start + 30;\n      let num_predators = parseInt(lines[predators_start + 2]);\n      let obstacles_start = predators_end + 2 + 14 * num_predators;\n      let obstacles_end = obstacles_start + 3;\n      let num_obstacles = parseInt(lines[obstacles_start + 2]);\n      //draw grid\n      for (let i = 25; i < context.canvas.width; i += 25) {\n        drawLine(context, i, 0, i, context.canvas.height, \"black\");\n      }\n      for (let i = 25; i < context.canvas.height; i += 25) {\n        drawLine(context, 0, i, context.canvas.width, i, \"#000000\");\n      }\n      //draw plants\n      for (let i = 0; i < num_plants; i++) {\n        drawCircle(context, parseInt(lines[30 + 11 * i]), parseInt(lines[33 + 11 * i]), parseFloat(lines[36 + 11 * i]), \"green\");\n      }\n      //draw grazers\n      for (let i = 0; i < num_grazers; i++) {\n        drawBlock(context, parseInt(lines[grazers_end + 3 + 11 * i]), parseInt(lines[grazers_end + 6 + 11 * i]), \"blue\");\n      }\n      //draw predators\n      for (let i = 0; i < num_predators; i++) {\n        drawBlock(context, parseInt(lines[predators_end + 3 + 14 * i]), parseInt(lines[predators_end + 6 + 14 * i]), \"red\");\n      }\n      //draw obstacles\n      for (let i = 0; i < num_obstacles; i++) {\n        drawCircle(context, parseInt(lines[obstacles_end + 3 + 14 * i]), parseInt(lines[obstacles_end + 6 + 14 * i]), parseFloat(lines[obstacles_end + 9 + 14 * i]), \"grey\");\n      }\n      //   for (let i = 0; i < map1.num_obstacles; i++)\n      //   {\n      //     drawCircle(context, obstacles[i].x_coord, obstacles[i].y_coord, obstacles[i].diam,\"grey\");\n      //   }\n      //   for (let i = 0; i < map1.num_grazers; i++)\n      //   {\n      //     drawBlock(context, grazers[i].x_coord, grazers[i].y_coord,\"blue\");\n      //  }\n      //  for (let i = 0; i < map1.num_predators; i++)\n      //   {\n      //     drawBlock(context, predators[i].x_coord, predators[i].y_coord,\"red\");\n      //  }\n    });\n  }, []);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Test map width = \", 0]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 262,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"canvas\", {\n      ref: canvasRef,\n      ...props\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 263,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true);\n};\n_s(Canvas, \"UJgi7ynoup7eqypjnwyX/s32POg=\");\n_c = Canvas;\nexport default Canvas;\nvar _c;\n$RefreshReg$(_c, \"Canvas\");","map":{"version":3,"names":["React","useRef","useEffect","jsxDEV","_jsxDEV","Fragment","_Fragment","urlName","window","location","pathname","raw","require","drawLine","ctx","x1","y1","x2","y2","bColor","beginPath","moveTo","lineTo","lineWidth","strokeStyle","fillStyle","fill","stroke","drawBlock","drawCircle","d1","arc","Math","PI","Canvas","props","_s","canvasRef","canvas","current","context","getContext","fetch","then","r","text","lines","split","width","parseFloat","height","style","num_plants","parseInt","grazers_start","grazers_end","num_grazers","predators_start","predators_end","num_predators","obstacles_start","obstacles_end","num_obstacles","i","children","fileName","_jsxFileName","lineNumber","columnNumber","ref","_c","$RefreshReg$"],"sources":["C:/Users/jed00/Documents/PROTO_REACT_EXPRESS/frontend/src/Canvas.js"],"sourcesContent":["import React, { useRef, useEffect } from 'react';\r\n//import raw from './assets/LifeSimulation02.xml';\r\n//mport raw from './assets/usefile.xml';\r\n// class Map \r\n// {\r\n//       constructor()\r\n//       {\r\n//             this.map_height = 0.0;\r\n//             this.map_width = 0.0;   \r\n//             this.initial_plants = 0;   \r\n//             this.initial_predators = 0;\r\n//             this.initial_grazers = 0;\r\n//             this.initial_obstacles = 0;\r\n//       }\r\n//       get width() { return this.map_width; }\r\n//       set width(num) { this.map_width = num; }\r\n//       get height() { return this.map_height; }\r\n//       set height(num) { this.map_height = num; } \r\n//       get num_plants() { return this.initial_plants }\r\n//       set num_plants(num) { this.initial_plants = num }\r\n//       get num_grazers() { return this.initial_grazers }\r\n//       set num_grazers(num) { this.initial_grazers = num }\r\n//       get num_predators() { return this.initial_predators }\r\n//       set num_predators(num) { this.initial_predators = num }\r\n//       get num_obstacles() { return this.initial_obstacles }\r\n//       set num_obstacles(num) { this.initial_obstacles = num }\r\n// }\r\n\r\n// class Grazer\r\n// {\r\n//       constructor()\r\n//       {\r\n//             this.x = 0;\r\n//             this.y = 0;\r\n//       }\r\n//       set x_coord(num) { this.x = num; }\r\n//       get x_coord() { return this.x; }\r\n//       get y_coord() { return this.y; }\r\n//       set y_coord(num) { this.y = num; }\r\n// }\r\n\r\n// class Obstacle\r\n// {\r\n//       constructor()\r\n//       {\r\n//             this.x = 0;\r\n//             this.y = 0;\r\n//             this.diameter = 0.0;\r\n//       }\r\n//       set x_coord(num) { this.x = num; }\r\n//       get x_coord() { return this.x; }\r\n//       get y_coord() { return this.y; }\r\n//       set y_coord(num) { this.y = num; }\r\n//       get diam() { return this.diameter; }\r\n//       set diam(num) { this.diameter = num; }\r\n// }\r\n\r\n// class Plant\r\n// {\r\n//       constructor()\r\n//       {\r\n//             this.x = 0;\r\n//             this.y = 0;\r\n//             this.diameter = 0.0;\r\n//       }\r\n//       set x_coord(num) { this.x = num; }\r\n//       get x_coord() { return this.x; }\r\n//       get y_coord() { return this.y; }\r\n//       set y_coord(num) { this.y = num; }\r\n//       get diam() { return this.diameter; }\r\n//       set diam(num) { this.diameter = num; }\r\n// }\r\n\r\n// class Predator\r\n// {\r\n//       constructor()\r\n//       {\r\n//             this.x = 0;\r\n//             this.y = 0;\r\n//       }\r\n//       set x_coord(num) { this.x = num; }\r\n//       get x_coord() { return this.x; }\r\n//       get y_coord() { return this.y; }\r\n//       set y_coord(num) { this.y = num; }\r\n// }\r\n\r\n// const map1 = new Map();\r\n// let plants = [];\r\n// let predators = [];\r\n// let grazers = [];\r\n// let obstacles = [];\r\n\r\n// fetch(raw)\r\n// .then(r=>r.text())\r\n// .then(text=>{\r\n//       let lines =  text.split('\\n');\r\n//       map1.width = parseFloat(lines[3]);\r\n//       map1.height = parseFloat(lines[6]);\r\n//       map1.num_plants = parseInt(lines[11]);\r\n\r\n//       for (let i = 0; i < (map1.num_plants); i += 1)\r\n//       {\r\n//             const temp = new Plant();\r\n//             temp.x_coord = parseInt(lines[30+11*i]);\r\n//             temp.y_coord = parseInt(lines[33+11*i]);\r\n//             temp.diam = parseFloat(lines[36+11*i]);\r\n//             plants.push(temp);\r\n//       }\r\n\r\n//       let grazers_start = 29 + 11 * map1.num_plants;\r\n//       let grazers_end = grazers_start + 18;\r\n//       map1.num_grazers = parseInt(lines[grazers_start + 2]);\r\n                  \r\n//       for (let i = 0; i < (map1.num_grazers); i += 1)\r\n//       {\r\n//             const temp = new Grazer();\r\n//             temp.x_coord = parseInt(lines[grazers_end+3+11*i]);\r\n//             temp.y_coord = parseInt(lines[grazers_end+6+11*i]);\r\n//             grazers.push(temp);\r\n//       }\r\n\r\n//       let predators_start = grazers_end + 2 + 11 * map1.num_grazers;\r\n//       let predators_end = predators_start + 30;\r\n//       map1.num_predators = parseInt(lines[predators_start + 2]);\r\n                  \r\n//       for (let i = 0; i < (map1.num_predators); i += 1)\r\n//       {\r\n//             const temp = new Predator();\r\n//             temp.x_coord = parseInt(lines[predators_end+3+14*i]);\r\n//             temp.y_coord = parseInt(lines[predators_end+6+14*i]);\r\n//             predators.push(temp);\r\n//       }\r\n\r\n//       let obstacles_start = predators_end + 2 + 14 * map1.num_predators;\r\n//       let obstacles_end = obstacles_start + 3;\r\n//       map1.num_obstacles = parseInt(lines[obstacles_start + 2]);\r\n       \r\n//       for (let i = 0; i < (map1.num_obstacles); i += 1)\r\n//       {\r\n//             const temp = new Obstacle();\r\n//             temp.x_coord = parseInt(lines[obstacles_end+3+14*i]);\r\n//             temp.y_coord = parseInt(lines[obstacles_end+6+14*i]);\r\n//             temp.diam = parseFloat(lines[obstacles_end+9+14*i]);\r\n//             obstacles.push(temp);\r\n//       }\r\n// });\r\n\r\nconst urlName = window.location.pathname;\r\n\r\nconst raw = require(`${urlName}.xml`);\r\n\r\nfunction drawLine(ctx, x1, y1, x2, y2, bColor)\r\n{\r\n  ctx.beginPath();\r\n  ctx.moveTo(x1, y1);\r\n  ctx.lineTo(x2, y2);\r\n  ctx.lineWidth = .5;\r\n  ctx.strokeStyle = bColor;\r\n  ctx.fillStyle = bColor;\r\n  ctx.fill();\r\n  ctx.stroke();\r\n};\r\n    //draws a big line that looks like a square\r\n\r\n\r\nfunction drawBlock(ctx, x1, y1, bColor)\r\n{\r\n  ctx.beginPath();\r\n  ctx.moveTo(x1, y1+5);\r\n  ctx.lineTo(x1+10, y1+5);\r\n  ctx.lineWidth = 10;\r\n  ctx.strokeStyle = bColor;\r\n  ctx.stroke();\r\n};\r\n\r\nfunction drawCircle(ctx, x1, y1, d1, bColor)\r\n{\r\n  ctx.beginPath();\r\n  ctx.arc(x1+5, y1+5, d1/2, 0, 2*Math.PI);\r\n  ctx.lineWidth = 1;\r\n  ctx.strokeStyle = bColor;\r\n  ctx.fillStyle = bColor;\r\n  ctx.fill();\r\n  ctx.stroke();\r\n};\r\n\r\n\r\nconst Canvas = props => {\r\n    const canvasRef = useRef(null)    \r\n\r\n\r\n\r\n    useEffect(() => {\r\n      const canvas = canvasRef.current;\r\n      const context = canvas.getContext('2d');\r\n      // context.canvas.width = map1.width;\r\n      // context.canvas.height = map1.height;\r\n      \r\n      fetch(raw)\r\n      .then(r=>r.text())\r\n      .then(text=>{\r\n        let lines =  text.split('\\n');\r\n        context.canvas.width = parseFloat(lines[3]);;\r\n        context.canvas.height = parseFloat(lines[6]);\r\n        context.canvas.style = \"border:1px solid #000000;\";\r\n        let num_plants = parseInt(lines[11]);\r\n        let grazers_start = 29 + 11 * num_plants;\r\n        let grazers_end = grazers_start + 18;\r\n        let num_grazers = parseInt(lines[grazers_start + 2]);\r\n        let predators_start = grazers_end + 2 + 11 * num_grazers;\r\n        let predators_end = predators_start + 30;\r\n        let num_predators = parseInt(lines[predators_start + 2]);\r\n        let obstacles_start = predators_end + 2 + 14 * num_predators;\r\n        let obstacles_end = obstacles_start + 3;\r\n        let num_obstacles = parseInt(lines[obstacles_start + 2]);\r\n       //draw grid\r\n        for(let i = 25; i < context.canvas.width; i+=25)\r\n        {\r\n          drawLine(context, i, 0, i, context.canvas.height, \"black\");\r\n        }\r\n        for(let i = 25; i < context.canvas.height; i+=25)\r\n        {\r\n          drawLine(context, 0, i, context.canvas.width, i, \"#000000\");\r\n        }\r\n        //draw plants\r\n        for (let i = 0; i < num_plants; i++)\r\n        {\r\n          drawCircle(context, parseInt(lines[30+11*i]), parseInt(lines[33+11*i]), parseFloat(lines[36+11*i]),\"green\");\r\n        }\r\n        //draw grazers\r\n        for (let i = 0; i < num_grazers; i++)\r\n        {\r\n          drawBlock(context, parseInt(lines[grazers_end+3+11*i]), parseInt(lines[grazers_end+6+11*i]),\"blue\");\r\n        }\r\n        //draw predators\r\n        for (let i = 0; i < num_predators; i++)\r\n        {\r\n          drawBlock(context, parseInt(lines[predators_end+3+14*i]), parseInt(lines[predators_end+6+14*i]),\"red\");\r\n        }\r\n        //draw obstacles\r\n        for (let i = 0; i < num_obstacles; i++)\r\n        {\r\n          drawCircle(context, parseInt(lines[obstacles_end+3+14*i]), parseInt(lines[obstacles_end+6+14*i]), parseFloat(lines[obstacles_end+9+14*i]),\"grey\");\r\n        }\r\n    //   for (let i = 0; i < map1.num_obstacles; i++)\r\n    //   {\r\n    //     drawCircle(context, obstacles[i].x_coord, obstacles[i].y_coord, obstacles[i].diam,\"grey\");\r\n    //   }\r\n    //   for (let i = 0; i < map1.num_grazers; i++)\r\n    //   {\r\n    //     drawBlock(context, grazers[i].x_coord, grazers[i].y_coord,\"blue\");\r\n    //  }\r\n    //  for (let i = 0; i < map1.num_predators; i++)\r\n    //   {\r\n    //     drawBlock(context, predators[i].x_coord, predators[i].y_coord,\"red\");\r\n    //  }\r\n    \r\n    });\r\n    }, []);\r\n    \r\n    return (<>\r\n    <p>Test map width = {0}</p>\r\n    <canvas ref={canvasRef} {...props}/>\r\n    </>);\r\n  \r\n  };\r\n  \r\n\r\n  export default Canvas;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,MAAM,EAAEC,SAAS,QAAQ,OAAO;AAChxC,MAAMC,GAAG,GAAGC,OAAO,CAAE,GAAEL,OAAQ,MAAK,CAAC;AAErC,SAASM,QAAQA,CAACC,GAAG,EAAEC,EAAE,EAAEC,EAAE,EAAEC,EAAE,EAAEC,EAAE,EAAEC,MAAM,EAC7C;EACEL,GAAG,CAACM,SAAS,CAAC,CAAC;EACfN,GAAG,CAACO,MAAM,CAACN,EAAE,EAAEC,EAAE,CAAC;EAClBF,GAAG,CAACQ,MAAM,CAACL,EAAE,EAAEC,EAAE,CAAC;EAClBJ,GAAG,CAACS,SAAS,GAAG,EAAE;EAClBT,GAAG,CAACU,WAAW,GAAGL,MAAM;EACxBL,GAAG,CAACW,SAAS,GAAGN,MAAM;EACtBL,GAAG,CAACY,IAAI,CAAC,CAAC;EACVZ,GAAG,CAACa,MAAM,CAAC,CAAC;AACd;AAAC;AACG;;AAGJ,SAASC,SAASA,CAACd,GAAG,EAAEC,EAAE,EAAEC,EAAE,EAAEG,MAAM,EACtC;EACEL,GAAG,CAACM,SAAS,CAAC,CAAC;EACfN,GAAG,CAACO,MAAM,CAACN,EAAE,EAAEC,EAAE,GAAC,CAAC,CAAC;EACpBF,GAAG,CAACQ,MAAM,CAACP,EAAE,GAAC,EAAE,EAAEC,EAAE,GAAC,CAAC,CAAC;EACvBF,GAAG,CAACS,SAAS,GAAG,EAAE;EAClBT,GAAG,CAACU,WAAW,GAAGL,MAAM;EACxBL,GAAG,CAACa,MAAM,CAAC,CAAC;AACd;AAAC;AAED,SAASE,UAAUA,CAACf,GAAG,EAAEC,EAAE,EAAEC,EAAE,EAAEc,EAAE,EAAEX,MAAM,EAC3C;EACEL,GAAG,CAACM,SAAS,CAAC,CAAC;EACfN,GAAG,CAACiB,GAAG,CAAChB,EAAE,GAAC,CAAC,EAAEC,EAAE,GAAC,CAAC,EAAEc,EAAE,GAAC,CAAC,EAAE,CAAC,EAAE,CAAC,GAACE,IAAI,CAACC,EAAE,CAAC;EACvCnB,GAAG,CAACS,SAAS,GAAG,CAAC;EACjBT,GAAG,CAACU,WAAW,GAAGL,MAAM;EACxBL,GAAG,CAACW,SAAS,GAAGN,MAAM;EACtBL,GAAG,CAACY,IAAI,CAAC,CAAC;EACVZ,GAAG,CAACa,MAAM,CAAC,CAAC;AACd;AAAC;AAGD,MAAMO,MAAM,GAAGC,KAAK,IAAI;EAAAC,EAAA;EACpB,MAAMC,SAAS,GAAGpC,MAAM,CAAC,IAAI,CAAC;EAI9BC,SAAS,CAAC,MAAM;IACd,MAAMoC,MAAM,GAAGD,SAAS,CAACE,OAAO;IAChC,MAAMC,OAAO,GAAGF,MAAM,CAACG,UAAU,CAAC,IAAI,CAAC;IACvC;IACA;;IAEAC,KAAK,CAAC/B,GAAG,CAAC,CACTgC,IAAI,CAACC,CAAC,IAAEA,CAAC,CAACC,IAAI,CAAC,CAAC,CAAC,CACjBF,IAAI,CAACE,IAAI,IAAE;MACV,IAAIC,KAAK,GAAID,IAAI,CAACE,KAAK,CAAC,IAAI,CAAC;MAC7BP,OAAO,CAACF,MAAM,CAACU,KAAK,GAAGC,UAAU,CAACH,KAAK,CAAC,CAAC,CAAC,CAAC;MAAC;MAC5CN,OAAO,CAACF,MAAM,CAACY,MAAM,GAAGD,UAAU,CAACH,KAAK,CAAC,CAAC,CAAC,CAAC;MAC5CN,OAAO,CAACF,MAAM,CAACa,KAAK,GAAG,2BAA2B;MAClD,IAAIC,UAAU,GAAGC,QAAQ,CAACP,KAAK,CAAC,EAAE,CAAC,CAAC;MACpC,IAAIQ,aAAa,GAAG,EAAE,GAAG,EAAE,GAAGF,UAAU;MACxC,IAAIG,WAAW,GAAGD,aAAa,GAAG,EAAE;MACpC,IAAIE,WAAW,GAAGH,QAAQ,CAACP,KAAK,CAACQ,aAAa,GAAG,CAAC,CAAC,CAAC;MACpD,IAAIG,eAAe,GAAGF,WAAW,GAAG,CAAC,GAAG,EAAE,GAAGC,WAAW;MACxD,IAAIE,aAAa,GAAGD,eAAe,GAAG,EAAE;MACxC,IAAIE,aAAa,GAAGN,QAAQ,CAACP,KAAK,CAACW,eAAe,GAAG,CAAC,CAAC,CAAC;MACxD,IAAIG,eAAe,GAAGF,aAAa,GAAG,CAAC,GAAG,EAAE,GAAGC,aAAa;MAC5D,IAAIE,aAAa,GAAGD,eAAe,GAAG,CAAC;MACvC,IAAIE,aAAa,GAAGT,QAAQ,CAACP,KAAK,CAACc,eAAe,GAAG,CAAC,CAAC,CAAC;MACzD;MACC,KAAI,IAAIG,CAAC,GAAG,EAAE,EAAEA,CAAC,GAAGvB,OAAO,CAACF,MAAM,CAACU,KAAK,EAAEe,CAAC,IAAE,EAAE,EAC/C;QACElD,QAAQ,CAAC2B,OAAO,EAAEuB,CAAC,EAAE,CAAC,EAAEA,CAAC,EAAEvB,OAAO,CAACF,MAAM,CAACY,MAAM,EAAE,OAAO,CAAC;MAC5D;MACA,KAAI,IAAIa,CAAC,GAAG,EAAE,EAAEA,CAAC,GAAGvB,OAAO,CAACF,MAAM,CAACY,MAAM,EAAEa,CAAC,IAAE,EAAE,EAChD;QACElD,QAAQ,CAAC2B,OAAO,EAAE,CAAC,EAAEuB,CAAC,EAAEvB,OAAO,CAACF,MAAM,CAACU,KAAK,EAAEe,CAAC,EAAE,SAAS,CAAC;MAC7D;MACA;MACA,KAAK,IAAIA,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGX,UAAU,EAAEW,CAAC,EAAE,EACnC;QACElC,UAAU,CAACW,OAAO,EAAEa,QAAQ,CAACP,KAAK,CAAC,EAAE,GAAC,EAAE,GAACiB,CAAC,CAAC,CAAC,EAAEV,QAAQ,CAACP,KAAK,CAAC,EAAE,GAAC,EAAE,GAACiB,CAAC,CAAC,CAAC,EAAEd,UAAU,CAACH,KAAK,CAAC,EAAE,GAAC,EAAE,GAACiB,CAAC,CAAC,CAAC,EAAC,OAAO,CAAC;MAC7G;MACA;MACA,KAAK,IAAIA,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGP,WAAW,EAAEO,CAAC,EAAE,EACpC;QACEnC,SAAS,CAACY,OAAO,EAAEa,QAAQ,CAACP,KAAK,CAACS,WAAW,GAAC,CAAC,GAAC,EAAE,GAACQ,CAAC,CAAC,CAAC,EAAEV,QAAQ,CAACP,KAAK,CAACS,WAAW,GAAC,CAAC,GAAC,EAAE,GAACQ,CAAC,CAAC,CAAC,EAAC,MAAM,CAAC;MACrG;MACA;MACA,KAAK,IAAIA,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGJ,aAAa,EAAEI,CAAC,EAAE,EACtC;QACEnC,SAAS,CAACY,OAAO,EAAEa,QAAQ,CAACP,KAAK,CAACY,aAAa,GAAC,CAAC,GAAC,EAAE,GAACK,CAAC,CAAC,CAAC,EAAEV,QAAQ,CAACP,KAAK,CAACY,aAAa,GAAC,CAAC,GAAC,EAAE,GAACK,CAAC,CAAC,CAAC,EAAC,KAAK,CAAC;MACxG;MACA;MACA,KAAK,IAAIA,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGD,aAAa,EAAEC,CAAC,EAAE,EACtC;QACElC,UAAU,CAACW,OAAO,EAAEa,QAAQ,CAACP,KAAK,CAACe,aAAa,GAAC,CAAC,GAAC,EAAE,GAACE,CAAC,CAAC,CAAC,EAAEV,QAAQ,CAACP,KAAK,CAACe,aAAa,GAAC,CAAC,GAAC,EAAE,GAACE,CAAC,CAAC,CAAC,EAAEd,UAAU,CAACH,KAAK,CAACe,aAAa,GAAC,CAAC,GAAC,EAAE,GAACE,CAAC,CAAC,CAAC,EAAC,MAAM,CAAC;MACnJ;MACJ;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;IAEA,CAAC,CAAC;EACF,CAAC,EAAE,EAAE,CAAC;EAEN,oBAAQ3D,OAAA,CAAAE,SAAA;IAAA0D,QAAA,gBACR5D,OAAA;MAAA4D,QAAA,GAAG,mBAAiB,EAAC,CAAC;IAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAC3BhE,OAAA;MAAQiE,GAAG,EAAEhC,SAAU;MAAA,GAAKF;IAAK;MAAA8B,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAAA,eAClC,CAAC;AAEL,CAAC;AAAChC,EAAA,CA9EEF,MAAM;AAAAoC,EAAA,GAANpC,MAAM;AAiFV,eAAeA,MAAM;AAAC,IAAAoC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}